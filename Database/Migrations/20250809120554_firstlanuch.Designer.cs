// <auto-generated />
using System;
using Database.Entites;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Database.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250809120554_firstlanuch")]
    partial class firstlanuch
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Database.Entites.Application", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AiSummary")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<int>("ApplicationTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnType("datetime2(0)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2500)
                        .HasColumnType("nvarchar(2500)");

                    b.Property<string>("File_Link")
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("Job_LevelId")
                        .HasColumnType("int");

                    b.Property<int?>("Job_TypeId")
                        .HasColumnType("int");

                    b.Property<int>("NumbersOfApplied")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("RecruiterId")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<TimeSpan>("TimeToComplete")
                        .HasColumnType("time");

                    b.Property<int?>("UniversityId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationTypeId");

                    b.HasIndex("Job_LevelId");

                    b.HasIndex("Job_TypeId");

                    b.HasIndex("RecruiterId");

                    b.HasIndex("UniversityId");

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("Database.Entites.ApplicationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.HasKey("Id");

                    b.ToTable("ApplicationTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Job_Appliaction"
                        },
                        new
                        {
                            Id = 2,
                            Name = "University_Application"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Assesment_Application"
                        });
                });

            modelBuilder.Entity("Database.Entites.Application_Offer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<int>("NumberOfTasks")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.HasKey("Id");

                    b.ToTable("Application_Offers");
                });

            modelBuilder.Entity("Database.Entites.Application_Result", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int");

                    b.Property<int>("Application_Result_StatusId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateAndTimeOfJoined")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<decimal?>("Result")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("SeekerId")
                        .HasColumnType("int");

                    b.Property<string>("SolutionFileUri")
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<TimeSpan?>("TakenTimeToComplete")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("Application_Result_StatusId");

                    b.HasIndex("SeekerId");

                    b.ToTable("Application_Results");
                });

            modelBuilder.Entity("Database.Entites.Application_Result_Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AnswerCorrectChoiceNum")
                        .HasColumnType("int");

                    b.Property<int>("Application_ResultId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Application_ResultId");

                    b.ToTable("Application_Result_Questions", t =>
                        {
                            t.HasCheckConstraint("CK_AnswerCorrectChoiceNum_ValidRange", "[AnswerCorrectChoiceNum] BETWEEN 1 AND 4");
                        });
                });

            modelBuilder.Entity("Database.Entites.Application_Result_Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.HasKey("Id");

                    b.ToTable("Application_Result_Statuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Accepted"
                        },
                        new
                        {
                            Id = 2,
                            Name = "under-checked"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Not-Accepted"
                        },
                        new
                        {
                            Id = 4,
                            Name = "pending"
                        },
                        new
                        {
                            Id = 5,
                            Name = "banned"
                        });
                });

            modelBuilder.Entity("Database.Entites.Application_Task_Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ApplicationId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("CAST(GETDATE() AS DATE)");

                    b.Property<decimal>("PaidAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("SubscriptionTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Time")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("CAST(GETDATE() AS TIME)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("UserTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("SubscriptionTypeId");

                    b.ToTable("Application_Task_Payments");
                });

            modelBuilder.Entity("Database.Entites.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<int?>("GovernorateId")
                        .HasColumnType("int");

                    b.Property<string>("ImageURL")
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<string>("Linked_In_Link")
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("GovernorateId");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("Database.Entites.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Database.Entites.Governorate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<int>("Name")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Governorates");
                });

            modelBuilder.Entity("Database.Entites.Job_Level", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.HasKey("Id");

                    b.ToTable("Job_Levels");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Junior"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Intermediate"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Senior"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Lead"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Principal"
                        });
                });

            modelBuilder.Entity("Database.Entites.Job_Type", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.HasKey("Id");

                    b.ToTable("Job_Types");
                });

            modelBuilder.Entity("Database.Entites.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<string>("Google_Id")
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<int?>("GovernorateId")
                        .HasColumnType("int");

                    b.Property<string>("ImageURL")
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<string>("Password")
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<string>("Phone")
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<int>("UserTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("GovernorateId");

                    b.HasIndex("UserTypeId");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("Database.Entites.Phone_Code", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CountryId")
                        .IsUnique();

                    b.ToTable("Phone_Codes");
                });

            modelBuilder.Entity("Database.Entites.Recruiter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<bool>("IsFreelancer")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInstructor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsProfileComplete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLoggedInTime")
                        .HasColumnType("datetime2(0)");

                    b.Property<string>("Linked_In_Link")
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int>("UniversityId")
                        .HasColumnType("int");

                    b.Property<int?>("UnviersityId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.HasIndex("UniversityId");

                    b.ToTable("Recruiters");
                });

            modelBuilder.Entity("Database.Entites.Recruiter_Application_Usage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AvailableApplicationsNumber")
                        .HasColumnType("int");

                    b.Property<int>("RecruiterId")
                        .HasColumnType("int");

                    b.Property<int>("TotalApplications")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RecruiterId")
                        .IsUnique();

                    b.ToTable("Recruiter_Application_Usages");
                });

            modelBuilder.Entity("Database.Entites.Seeker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsProfileCompleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStudent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("Job_LevelId")
                        .HasColumnType("int");

                    b.Property<int?>("Job_TypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastLoggedInTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("LinkedInLink")
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<string>("ResumeLink")
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<int?>("StudyingYear")
                        .HasColumnType("int");

                    b.Property<int?>("UniversityId")
                        .HasColumnType("int");

                    b.Property<string>("UniversityStudentNumber")
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.HasKey("Id");

                    b.HasIndex("Job_LevelId");

                    b.HasIndex("Job_TypeId");

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.HasIndex("UniversityId");

                    b.ToTable("Seekers");
                });

            modelBuilder.Entity("Database.Entites.SubscriptionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.HasKey("Id");

                    b.ToTable("SubscriptionTypes");
                });

            modelBuilder.Entity("Database.Entites.University", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<string>("image")
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.HasKey("Id");

                    b.ToTable("Universities");
                });

            modelBuilder.Entity("Database.Entites.UserType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.HasKey("Id");

                    b.ToTable("UserTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Seeker"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Recruiter"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Person"
                        });
                });

            modelBuilder.Entity("Database.Entites.Application", b =>
                {
                    b.HasOne("Database.Entites.ApplicationType", "ApplicationType")
                        .WithMany()
                        .HasForeignKey("ApplicationTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Database.Entites.Job_Level", "Job_Level")
                        .WithMany("Job_Applications")
                        .HasForeignKey("Job_LevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Database.Entites.Job_Type", "Job_Type")
                        .WithMany("Job_Applications")
                        .HasForeignKey("Job_TypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Database.Entites.Recruiter", "Recruiter")
                        .WithMany("Job_Applications")
                        .HasForeignKey("RecruiterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Database.Entites.University", "University")
                        .WithMany()
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ApplicationType");

                    b.Navigation("Job_Level");

                    b.Navigation("Job_Type");

                    b.Navigation("Recruiter");

                    b.Navigation("University");
                });

            modelBuilder.Entity("Database.Entites.Application_Result", b =>
                {
                    b.HasOne("Database.Entites.Application", "Application")
                        .WithMany("Application_Results")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Database.Entites.Application_Result_Status", "application_Result_Status")
                        .WithMany("Application_Results")
                        .HasForeignKey("Application_Result_StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Database.Entites.Seeker", "Seeker")
                        .WithMany("Application_Results")
                        .HasForeignKey("SeekerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Seeker");

                    b.Navigation("application_Result_Status");
                });

            modelBuilder.Entity("Database.Entites.Application_Result_Question", b =>
                {
                    b.HasOne("Database.Entites.Application_Result", null)
                        .WithMany("questions")
                        .HasForeignKey("Application_ResultId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Database.Entites.Application_Task_Payment", b =>
                {
                    b.HasOne("Database.Entites.Application", "Application")
                        .WithMany("application_Task_Payments")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Database.Entites.SubscriptionType", "SubscriptionType")
                        .WithMany("application_Task_Payments")
                        .HasForeignKey("SubscriptionTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Application");

                    b.Navigation("SubscriptionType");
                });

            modelBuilder.Entity("Database.Entites.Company", b =>
                {
                    b.HasOne("Database.Entites.Country", "Country")
                        .WithMany("Companies")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Database.Entites.Governorate", "Governorate")
                        .WithMany("Companies")
                        .HasForeignKey("GovernorateId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Country");

                    b.Navigation("Governorate");
                });

            modelBuilder.Entity("Database.Entites.Governorate", b =>
                {
                    b.HasOne("Database.Entites.Country", "Country")
                        .WithMany("Governorates")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Database.Entites.Person", b =>
                {
                    b.HasOne("Database.Entites.Country", "Country")
                        .WithMany("Persons")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Database.Entites.Governorate", "Governorate")
                        .WithMany("Persons")
                        .HasForeignKey("GovernorateId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Database.Entites.UserType", "UserType")
                        .WithMany()
                        .HasForeignKey("UserTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Governorate");

                    b.Navigation("UserType");
                });

            modelBuilder.Entity("Database.Entites.Phone_Code", b =>
                {
                    b.HasOne("Database.Entites.Country", "Country")
                        .WithOne("Phone_Code")
                        .HasForeignKey("Database.Entites.Phone_Code", "CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Database.Entites.Recruiter", b =>
                {
                    b.HasOne("Database.Entites.Company", "Company")
                        .WithMany("Recruiters")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Database.Entites.Person", "Person")
                        .WithOne("Recruiter")
                        .HasForeignKey("Database.Entites.Recruiter", "PersonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Database.Entites.University", "University")
                        .WithMany()
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Person");

                    b.Navigation("University");
                });

            modelBuilder.Entity("Database.Entites.Recruiter_Application_Usage", b =>
                {
                    b.HasOne("Database.Entites.Recruiter", "Recruiter")
                        .WithOne("Recruiter_Application_Usage")
                        .HasForeignKey("Database.Entites.Recruiter_Application_Usage", "RecruiterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Recruiter");
                });

            modelBuilder.Entity("Database.Entites.Seeker", b =>
                {
                    b.HasOne("Database.Entites.Job_Level", "Job_Level")
                        .WithMany("Seekers")
                        .HasForeignKey("Job_LevelId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Database.Entites.Job_Type", "Job_Type")
                        .WithMany("Seekers")
                        .HasForeignKey("Job_TypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Database.Entites.Person", "Person")
                        .WithOne("Seeker")
                        .HasForeignKey("Database.Entites.Seeker", "PersonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Database.Entites.University", "University")
                        .WithMany()
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Job_Level");

                    b.Navigation("Job_Type");

                    b.Navigation("Person");

                    b.Navigation("University");
                });

            modelBuilder.Entity("Database.Entites.Application", b =>
                {
                    b.Navigation("Application_Results");

                    b.Navigation("application_Task_Payments");
                });

            modelBuilder.Entity("Database.Entites.Application_Result", b =>
                {
                    b.Navigation("questions");
                });

            modelBuilder.Entity("Database.Entites.Application_Result_Status", b =>
                {
                    b.Navigation("Application_Results");
                });

            modelBuilder.Entity("Database.Entites.Company", b =>
                {
                    b.Navigation("Recruiters");
                });

            modelBuilder.Entity("Database.Entites.Country", b =>
                {
                    b.Navigation("Companies");

                    b.Navigation("Governorates");

                    b.Navigation("Persons");

                    b.Navigation("Phone_Code")
                        .IsRequired();
                });

            modelBuilder.Entity("Database.Entites.Governorate", b =>
                {
                    b.Navigation("Companies");

                    b.Navigation("Persons");
                });

            modelBuilder.Entity("Database.Entites.Job_Level", b =>
                {
                    b.Navigation("Job_Applications");

                    b.Navigation("Seekers");
                });

            modelBuilder.Entity("Database.Entites.Job_Type", b =>
                {
                    b.Navigation("Job_Applications");

                    b.Navigation("Seekers");
                });

            modelBuilder.Entity("Database.Entites.Person", b =>
                {
                    b.Navigation("Recruiter")
                        .IsRequired();

                    b.Navigation("Seeker")
                        .IsRequired();
                });

            modelBuilder.Entity("Database.Entites.Recruiter", b =>
                {
                    b.Navigation("Job_Applications");

                    b.Navigation("Recruiter_Application_Usage")
                        .IsRequired();
                });

            modelBuilder.Entity("Database.Entites.Seeker", b =>
                {
                    b.Navigation("Application_Results");
                });

            modelBuilder.Entity("Database.Entites.SubscriptionType", b =>
                {
                    b.Navigation("application_Task_Payments");
                });
#pragma warning restore 612, 618
        }
    }
}
